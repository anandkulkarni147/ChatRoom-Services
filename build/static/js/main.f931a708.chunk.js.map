{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","type","placeholder","room","key","Chat","input","setInput","roomId","useParams","setRoomName","Date","length","timestamp","toDate","toUTCString","displayName","onChange","e","target","preventDefault","FieldValue","serverTimestamp","actionTypes","state","action","console","log","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8bAeMA,EADcC,IAASC,cAXN,CACnBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIIC,YACjBC,EAAOX,IAASW,OAChBC,EAAW,IAAIZ,IAASW,KAAKE,mBAGpBd,I,QC6BAe,MA3Cf,YAAgD,IAAD,EAAxBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WAAc,EAEnBC,mBAAS,IAFU,mBAEpCC,EAFoC,KAE9BC,EAF8B,OAGXF,mBAAS,IAHE,mBAGpCG,EAHoC,KAG1BC,EAH0B,KA0B3C,OArBAC,qBAAU,WACFR,GACAhB,EAAGyB,WAAW,SAASC,IAAIV,GAAIS,WAAW,YAAYE,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GAC1FN,EAAYM,EAASC,KAAKC,KAAI,SAAAL,GAAG,OAAIA,EAAIM,gBAGlD,CAAChB,IAEJQ,qBAAU,WACNH,EAAQY,KAAKC,MAAsB,IAAhBD,KAAKE,aACzB,IAWKjB,EAWA,yBAAKkB,QApBM,WACf,IAAMC,EAAWC,OAAO,8BACpBD,GACArC,EAAGyB,WAAW,SAASc,IAAI,CACvBtB,KAAMoB,KAgBgBG,UAAU,eAChC,6CAXR,kBAAC,IAAD,CAAMC,GAAE,iBAAYzB,IAChB,yBAAKwB,UAAU,eACX,kBAACE,EAAA,EAAD,CAAQC,IAAG,iDAA4CvB,EAA5C,UACX,yBAAKoB,UAAU,qBACX,4BAAKvB,GACL,qCAAIK,EAAS,UAAb,aAAI,EAAasB,aCpCxBC,EAAeC,0BAEfC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,SAA1B,OACzB,kBAACL,EAAaM,SAAd,CAAuBC,MAAOC,qBAAWL,EAASC,IAC7CC,IAIII,EAAgB,kBAAMC,qBAAWV,ICoD/BW,MAnDf,WAAoB,IAAD,EAEWrC,mBAAS,IAFpB,mBAERsC,EAFQ,KAEDC,EAFC,OAGIJ,IAAVK,EAHM,oBAGNA,KAcT,OAZAnC,qBAAU,WACN,IAAMoC,EAAc5D,EAAGyB,WAAW,SAASG,YAAW,SAAAC,GAAQ,OAAK6B,EAAS7B,EAASC,KAAKC,KAAI,SAAAL,GAAG,MAC7F,CACIV,GAAIU,EAAIV,GACRgB,KAAMN,EAAIM,eAGlB,OAAO,WACH4B,OAEL,IAGC,yBAAKpB,UAAU,WACX,yBAAKA,UAAU,mBACX,kBAACE,EAAA,EAAD,CAAQC,IAAG,OAAEgB,QAAF,IAAEA,OAAF,EAAEA,EAAME,WACnB,yBAAKrB,UAAU,wBACX,kBAACsB,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACA,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACA,EAAA,EAAD,KACI,kBAAC,IAAD,SAKZ,yBAAKtB,UAAU,mBACX,yBAAKA,UAAU,4BACX,kBAAC,IAAD,MACA,2BAAOuB,KAAK,OAAOC,YAAY,iCAIvC,yBAAKxB,UAAU,kBACX,kBAAC,EAAD,CAAatB,YAAU,IACtBuC,EAAM1B,KAAI,SAAAkC,GAAI,OACX,kBAAC,EAAD,CAAaC,IAAKD,EAAKjD,GAAIA,GAAIiD,EAAKjD,GAAIC,KAAMgD,EAAKjC,KAAKf,a,kECqC7DkD,MA/Ef,WAAiB,IAAD,MAEchD,mBAAS,IAFvB,mBAELiD,EAFK,KAEEC,EAFF,OAGYlD,mBAAS,IAHrB,mBAGLC,EAHK,KAGCC,EAHD,KAIJiD,EAAWC,cAAXD,OAJI,EAKoBnD,mBAAS,IAL7B,mBAKLkB,EALK,KAKKmC,EALL,OAMoBrD,mBAAS,IAN7B,mBAMLG,EANK,KAMKC,EANL,OAOO+B,IAAVK,EAPG,oBAOHA,KAuBT,OArBAnC,qBAAU,WACF8C,IACAtE,EAAGyB,WAAW,SAASC,IAAI4C,GAAQ1C,YAAW,SAACC,GAAD,OAAc2C,EAAY3C,EAASG,OAAOf,SACxFjB,EAAGyB,WAAW,SAASC,IAAI4C,GAAQ7C,WAAW,YAAYE,QAAQ,YAAa,OAAOC,YAAW,SAAAC,GAAQ,OAAIN,EAAYM,EAASC,KAAKC,KAAI,SAAAL,GAAG,OAAIA,EAAIM,iBAE3J,CAACsC,IAEJ9C,qBAAU,WACNH,EAAQY,KAAKC,MAAsB,IAAhBD,KAAKE,aACzB,CAACmC,IAaA,yBAAK9B,UAAU,QACX,yBAAKA,UAAU,gBACX,kBAACE,EAAA,EAAD,CAAQC,IAAG,iDAA4CvB,EAA5C,UACX,yBAAKoB,UAAU,oBACX,4BAAKH,GACL,uCACc,IACT,IAAIoC,KAAJ,UAASnD,EAASA,EAASoD,OAAS,UAApC,iBAAS,EAA+BC,iBAAxC,aAAS,EAA0CC,UAAUC,gBAItE,yBAAKrC,UAAU,qBACX,kBAACsB,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACA,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACA,EAAA,EAAD,KACI,kBAAC,IAAD,SAKZ,yBAAKtB,UAAU,cACVlB,EAASS,KAAI,SAAAa,GAAO,aACjB,uBAAGJ,UAAS,wBAAmBI,EAAQ3B,OAAS0C,EAAKmB,aAAe,mBAChE,0BAAMtC,UAAU,cAAcI,EAAQ3B,MACrC2B,EAAQA,QACT,0BAAMJ,UAAU,mBACX,IAAIiC,KAAJ,UAAS7B,EAAQ+B,iBAAjB,aAAS,EAAmBC,UAAUC,oBAMvD,yBAAKrC,UAAU,gBACX,kBAAC,IAAD,MACA,8BACI,2BAAOY,MAAOgB,EAAOW,SAAU,SAACC,GAAD,OAAOX,EAASW,EAAEC,OAAO7B,QAAQW,KAAK,OAAOC,YAAY,mBACxF,4BAAQ5B,QAnDJ,SAAC4C,GACjBA,EAAEE,iBACFlF,EAAGyB,WAAW,SAASC,IAAI4C,GAAQ7C,WAAW,YAAYc,IAAI,CAC1DK,QAASwB,EACTnD,KAAM0C,EAAKmB,YACXH,UAAW1E,IAASU,UAAUwE,WAAWC,oBAE7Cf,EAAS,KA4CiCN,KAAK,UAAnC,mBAEJ,kBAAC,IAAD,S,gCClFHsB,EACC,WAiBCrC,EAdC,SAACsC,EAAOC,GAEpB,OADAC,QAAQC,IAAIF,GACJA,EAAOxB,MACX,KAAKsB,EACD,OAAO,2BACAC,GADP,IAEI3B,KAAM4B,EAAO5B,OAGrB,QACI,OAAO2B,ICmBJI,MA9Bf,WAAkB,IAAD,EAEWpC,IAFX,yCAEDqC,EAFC,KAeb,OACI,yBAAKnD,UAAU,SACX,yBAAKA,UAAU,oBACX,yBAAKG,IAAI,mEAAmEiD,IAAI,KAChF,yBAAKpD,UAAU,eACX,6DAEJ,kBAACqD,EAAA,EAAD,CAAQzD,QAnBL,WACXxB,EACKkF,gBAAgBjF,GAChBkF,MAAK,SAAAC,GACFL,EAAS,CACL5B,KAAMsB,EACN1B,KAAMqC,EAAOrC,UAGpBsC,OAAM,SAAAC,GAAK,OAAIC,MAAMD,EAAMtD,cAUxB,0BCMDwD,MA3Bf,WAAgB,IAAD,EAEM9C,IAAVK,EAFI,oBAEJA,KAET,OACE,yBAAKnB,UAAU,OACXmB,EAGE,yBAAKnB,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6D,KAAK,kBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UAVV,kBAAC,EAAD,QCHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAe5D,aJVS,CACxBU,KAAM,MISqCX,QAASA,GAClD,kBAAC,EAAD,QAGJ8D,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAC,GACLV,QAAQU,MAAMA,EAAMtD,c","file":"static/js/main.f931a708.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBOPO5Ig-8eKpbTKcN8bFWlmfulFteXbCo\",\r\n    authDomain: \"chatroomservices.firebaseapp.com\",\r\n    databaseURL: \"https://chatroomservices.firebaseio.com\",\r\n    projectId: \"chatroomservices\",\r\n    storageBucket: \"chatroomservices.appspot.com\",\r\n    messagingSenderId: \"279855679045\",\r\n    appId: \"1:279855679045:web:903002d53f9da3f521452c\",\r\n    measurementId: \"G-FJF1G1S5NW\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","import React, { useState, useEffect } from 'react';\r\nimport \"./SidebarChat.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport db from \"./firebase\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction SidebarChat({ id, name, addNewChat }) {\r\n\r\n    const [seed, setSeed] = useState('');\r\n    const [messages, setMessages] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            db.collection('rooms').doc(id).collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\r\n                setMessages(snapshot.docs.map(doc => doc.data()))\r\n            });\r\n        }\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random() * 5000));\r\n    }, []);\r\n\r\n    const createChat = () => {\r\n        const roomName = prompt(\"Please enter name for chat\");\r\n        if (roomName) {\r\n            db.collection('rooms').add({\r\n                name: roomName,\r\n            });\r\n        }\r\n    };\r\n\r\n    return !addNewChat ? (\r\n        <Link to={`/rooms/${id}`}>\r\n            <div className=\"sidebarChat\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n                <div className=\"sidebarChat__Info\">\r\n                    <h2>{name}</h2>\r\n                    <p>{messages[0]?.message}</p>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    ) : (\r\n            <div onClick={createChat} className=\"sidebarChat\">\r\n                <h2>Add new Chat</h2>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default SidebarChat;\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);","import React, { useState, useEffect } from 'react';\r\nimport \"./Sidebar.css\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport db from \"./firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction Sidebar() {\r\n\r\n    const [rooms, setRooms] = useState([]);\r\n    const [{ user }] = useStateValue();\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = db.collection('rooms').onSnapshot(snapshot => (setRooms(snapshot.docs.map(doc => (\r\n            {\r\n                id: doc.id,\r\n                data: doc.data(),\r\n            })))\r\n        ));\r\n        return () => {\r\n            unsubscribe();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__header\">\r\n                <Avatar src={user?.photoURL} />\r\n                <div className=\"sidebar__headerRight\">\r\n                    <IconButton>\r\n                        <DonutLargeIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MessageIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__search\">\r\n                <div className=\"sidebar__searchContainer\">\r\n                    <SearchOutlinedIcon />\r\n                    <input type=\"text\" placeholder=\"Search or start a new chat\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__chats\">\r\n                <SidebarChat addNewChat />\r\n                {rooms.map(room => (\r\n                    <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useState, useEffect } from 'react';\r\nimport \"./Chat.css\";\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport { useParams } from \"react-router-dom\";\r\nimport db from \"./firebase\";\r\nimport firebase from \"firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction Chat() {\r\n\r\n    const [input, setInput] = useState(\"\");\r\n    const [seed, setSeed] = useState('');\r\n    const { roomId } = useParams();\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n    const [{ user }] = useStateValue();\r\n\r\n    useEffect(() => {\r\n        if (roomId) {\r\n            db.collection('rooms').doc(roomId).onSnapshot((snapshot) => setRoomName(snapshot.data().name));\r\n            db.collection('rooms').doc(roomId).collection('messages').orderBy('timestamp', 'asc').onSnapshot(snapshot => setMessages(snapshot.docs.map(doc => doc.data())));\r\n        }\r\n    }, [roomId]);\r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random() * 5000));\r\n    }, [roomId]);\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        db.collection('rooms').doc(roomId).collection('messages').add({\r\n            message: input,\r\n            name: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        })\r\n        setInput(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat__header\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n                <div className=\"chat__headerInfo\">\r\n                    <h3>{roomName}</h3>\r\n                    <p>\r\n                        last seen{\" \"}\r\n                        {new Date(messages[messages.length - 1]?.timestamp?.toDate()).toUTCString()}\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"chat__headerRight\">\r\n                    <IconButton>\r\n                        <SearchOutlinedIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <AttachFileIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"chat__body\">\r\n                {messages.map(message => (\r\n                    <p className={`chat__message ${message.name === user.displayName && 'chat__reciever'}`}>\r\n                        <span className=\"chat__name\">{message.name}</span>\r\n                        {message.message}\r\n                        <span className=\"chat__timestamp\">\r\n                            {new Date(message.timestamp?.toDate()).toUTCString()}\r\n                        </span>\r\n                    </p>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"chat__footer\">\r\n                <InsertEmoticonIcon />\r\n                <form>\r\n                    <input value={input} onChange={(e) => setInput(e.target.value)} type=\"text\" placeholder=\"Type a message\" />\r\n                    <button onClick={sendMessage} type=\"submit\">Send a message</button>\r\n                </form>\r\n                <MicIcon />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n","export const initialState = {\r\n    user: null,\r\n};\r\n\r\nexport const actionTypes = {\r\n    SET_USER: \"SET_USER\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    console.log(action);\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\r\nimport \"./Login.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { auth, provider } from \"./firebase\";\r\nimport { useStateValue } from './StateProvider';\r\nimport { actionTypes } from './reducer';\r\n\r\nfunction Login() {\r\n\r\n    const [{ }, dispatch] = useStateValue();\r\n    const signIn = () => {\r\n        auth\r\n            .signInWithPopup(provider)\r\n            .then(result => {\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: result.user,\r\n                })\r\n            })\r\n            .catch(error => alert(error.message));\r\n    };\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__container\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/c/c6/ChatRoom.png\" alt=\"\" />\r\n                <div className=\"login__text\">\r\n                    <h1>Sign in to ChatRoom Services</h1>\r\n                </div>\r\n                <Button onClick={signIn}>\r\n                    Sign In with Google\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Sidebar from \"./Sidebar\";\r\nimport Chat from './Chat';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Login from \"./Login\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction App() {\r\n\r\n  const [{ user }] = useStateValue();\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {!user ? (\r\n        <Login />\r\n      ) : (\r\n          <div className=\"app__body\">\r\n            <Router>\r\n              <Sidebar />\r\n              <Switch>\r\n                <Route path=\"/rooms/:roomId\">\r\n                  <Chat />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                  <Chat />\r\n                </Route>\r\n              </Switch>\r\n            </Router>\r\n          </div>\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport reducer, { initialState } from \"./reducer\";\r\nimport { StateProvider } from \"./StateProvider\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StateProvider initialState={initialState} reducer={reducer}>\r\n      <App />\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}